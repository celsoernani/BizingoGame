syntax = "proto3";
//sempre deve existir uma message para que receba os parametros e uma 
//messagem retornando os parametro
//verificar como mandar um estado e como está recebendo no socket da pasta
//esse proto também vai ta n api ou no cliente no caso react exatamente igual.

message Player {
  string id= 1;
  string name = 2;
  int32 side = 3;
  bool turn = 4;
}
message AddPlayer {
  string id= 1;

 }
message PlayerResponse {
  string id= 1;

 }

 message ListPlayersequest {
  string id = 1;
}
message ListPlayersResponse {
  repeated Player players = 1;
}


message UpdateChangeListPlayers {
  repeated Player players = 1;
}

message Message { 
  string name = 1;
  string text = 2;
}
message AddMessage {
  Message message = 1;
 }
message MessageResponse {
  Message message = 1;
 }
 message ListMessagesequest {
  string id = 1;
}
message ListMessagesResponse {
  repeated Message messages = 1;
}

message Piece { 
  int32 id = 1;
  bool alive = 2;
  bool captain = 3;
  int32 side = 4;
  int32 labelPosition = 5;
}

message Triangle { 
  bool available = 1;
  int32 label = 2;
  int32 top= 3;
  int32 left= 4;
  int32 side= 5;
  Piece piece = 6;
}

message GameState { 
  repeated Piece pieces = 1; 
  repeated Triangle triangles = 2;
  bool gameover = 3;
}
message UpdateGame {
  GameState gamestate = 1;
}
message GameResponse {
  GameState gamestate = 1;
 }

 service GameService {
  rpc CreatePlayer(AddPlayer) returns (PlayerResponse); 
  rpc FindPlayers(ListPlayersequest) returns (ListPlayersResponse);
  rpc CreateMessage(AddMessage) returns (MessageResponse); 
  rpc FindMessages(ListMessagesequest) returns (ListMessagesResponse);
  rpc UpdateGameState(UpdateGame) returns (GameResponse);
  rpc UpdatePlayersServer(UpdateChangeListPlayers) returns (ListPlayersResponse); 
}